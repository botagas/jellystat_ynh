#!/bin/bash

#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# INITIALIZE SETTINGS AND VARIABLES
#=================================================

ynh_app_setting_set --app=$app --key=do_not_backup_data --value=0

# Save the credentials in the app settings for reference
# Define default admin username and generate a secure password
js_user=$adminuser
# Debugging the user choice
ynh_print_warn "Using the following user: $adminuser"
ynh_app_setting_set --key=js_user --value="$js_user"

# Check if a password was supplied via the argument
if [[ -n "$YNH_APP_ARG_PASSWORD" ]]; then
    js_password="$YNH_APP_ARG_PASSWORD"
else
    # Generate a random password if none was supplied
    js_password=$(ynh_string_random)
fi

# Save the password
ynh_app_setting_set --key=js_password --value="$js_password"

# Save PostgreSQL credentials
postgres_user="jfstat"
ynh_app_setting_set --key=postgres_user --value="$postgres_user"
postgres_db="jfstat"
ynh_app_setting_set --key=postgres_db --value="$postgres_db"

# Generate and store db password
postgres_password=$(ynh_string_random)
ynh_app_setting_set --key=postgres_password --value="$postgres_password"

# Save app port
ynh_app_setting_set --key=app_port --value="$port"

# Generate secret token
jwt_secret=$(ynh_string_random)
ynh_app_setting_set --key=jwt_secret --value="$jwt_secret"

#=================================================
# SET UP POSTGRESQL DATABASE
#=================================================

ynh_script_progression "Configuring PostgreSQL database..." 

# Drop existing db and user if been leftover
ynh_psql_db_shell postgres <<< "DROP DATABASE IF EXISTS $postgres_db;"
ynh_psql_db_shell postgres <<< "DROP USER IF EXISTS $postgres_user;"

# Set up PostgreSQL database and user
ynh_psql_db_shell postgres <<< "CREATE USER $postgres_user WITH PASSWORD '$postgres_password';"
ynh_psql_db_shell postgres <<< "ALTER USER $postgres_user CREATEDB;"
ynh_psql_db_shell postgres <<< "CREATE DATABASE $postgres_db OWNER $postgres_user;"
ynh_psql_db_shell postgres <<< "GRANT ALL PRIVILEGES ON DATABASE $postgres_db TO $postgres_user;"

#=================================================
# DOWNLOAD, CHECK, AND SET UP SOURCE
#=================================================

ynh_script_progression "Setting up source files..." 
ynh_setup_source --dest_dir="$install_dir" --source_id="main"

# Update create_database.js to use "IF NOT EXISTS"
ynh_replace --match="'CREATE DATABASE ' \\+ _POSTGRES_DATABASE" --replace="'CREATE DATABASE IF NOT EXISTS ${postgres_db};'" --file="$install_dir/backend/create_database.js"

# Update swagger.json to set host as the domain
ynh_replace --match="\"host\": \"\"" --replace="\"host\": \"$domain\"" --file="$install_dir/backend/swagger.json"

# Update server.js to use the allocated port
ynh_replace --match="^const PORT = .*" --replace="const PORT = process.env.PORT || $port;" --file="$install_dir/backend/server.js"

# Set up backupfolder according to source /classes/backup.js file
mkdir -p "$data_dir"
mkdir -p "$backup_dir"
mkdir -p "$backup_data"

#=================================================
# INSTALL NPM DEPENDENCIES AND BUILD
#=================================================
ynh_script_progression "Installing Node.js..." 
ynh_nodejs_install

ynh_script_progression "Installing and building app dependencies..." 
cd "$install_dir"
npm install
ynh_hide_warnings npm run build

#=================================================
# CONFIGURE ENVIRONMENT VARIABLES
#=================================================

ynh_script_progression "Configuring environment variables..." 
cat <<EOL > "$install_dir/.env"
POSTGRES_USER=$postgres_user
POSTGRES_PASSWORD=$postgres_password
POSTGRES_IP=127.0.0.1
POSTGRES_PORT=5432
POSTGRES_DB=$postgres_db
JS_USER=$js_user
JS_PASSWORD=$js_password
JWT_SECRET=$jwt_secret
PORT=$port
EOL

# Set permissions for the entire install directory
chown -R "$app:$app" "$install_dir"

# Set appropriate permissions for the `.env` file
chmod 600 "$install_dir/.env"
chown "$app:$app" "$install_dir/.env"

# Adjust permissions for web-accessible directories
# chown -R "$app:www-data" "$install_dir/backend"
chown -R "$app:www-data" "$install_dir/dist"

# Adjust permissions for data
chown -R "$app:$app" "$data_dir"

#=================================================
# SET UP SYSTEMD SERVICE
#=================================================

ynh_script_progression "Setting up systemd service..." 
ynh_config_add_systemd

#=================================================
# SET UP NGINX
#=================================================

ynh_config_add_nginx

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression "Starting $app's systemd service..."

# Start a systemd service
ynh_systemctl --service="$app" --action="start" --log_path="systemd" --timeout=30

# Wait for the service to become available
ynh_print_info "Waiting for $app to start..."
for i in {1..30}; do
    if curl -s http://127.0.0.1:$port/ >/dev/null; then
        ynh_print_info "$app is up and running!"
        break
    fi
    sleep 1
    if [ $i -eq 30 ]; then
        ynh_print_warn "$app failed to start within 30 seconds."
        ynh_exit_properly
    fi
done

# Create the admin user
ynh_print_info "Creating admin user..."
curl -X POST http://127.0.0.1:$port/auth/createuser -H "Content-Type: application/json" -d '{"username": "'"$js_user"'", "password": "'"$js_password"'"}'

# Debug the advanced state
setup_state_response=$(curl -s -X GET http://127.0.0.1:$port/auth/isConfigured -H "Content-Type: application/json")
ynh_print_warn "Setup state response: $setup_state_response"
#=================================================
# FINISH INSTALLATION
#=================================================

# Revoke the CREATEDB privilege after installation
ynh_psql_db_shell postgres <<< "ALTER USER $postgres_user NOCREATEDB;"

ynh_script_progression "Installation of $app completed!" --last
