#!/bin/bash

#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# INITIALIZE SETTINGS AND VARIABLES
#=================================================

# Predefined PostgreSQL credentials for seamless setup
postgres_user="jellystat_user"
postgres_password=$(ynh_string_random)
postgres_db="jellystat"

# Save PostgreSQL credentials as app settings for potential reuse
ynh_app_setting_set --key=postgres_user --value="$postgres_user"
ynh_app_setting_set --key=postgres_password --value="$postgres_password"
ynh_app_setting_set --key=postgres_db --value="$postgres_db"

# Other settings
app=$YNH_APP_INSTANCE_NAME
install_dir="/var/www/$app"
domain=$YNH_APP_DOMAIN
app_port=$(ynh_find_port --unused-only)
jwt_secret=$(ynh_string_random)

# Save app settings
ynh_app_setting_set --key=app_port --value="$app_port"
ynh_app_setting_set --key=jwt_secret --value="$jwt_secret"

#=================================================
# INSTALL DEPENDENCIES
#=================================================

ynh_script_progression --message="Installing dependencies..." --weight=1
ynh_install_app_dependencies nodejs npm postgresql

#=================================================
# SET UP POSTGRESQL DATABASE
#=================================================

ynh_script_progression --message="Configuring PostgreSQL database..." --weight=1

# Set PostgreSQL db info
postgres_user="jellystat_user"
postgres_password=$(ynh_string_random)
postgres_db="jfstat"  # Align with application's expected default

# Save PostgreSQL credentials
ynh_app_setting_set --key=postgres_user --value="$postgres_user"
ynh_app_setting_set --key=postgres_password --value="$postgres_password"
ynh_app_setting_set --key=postgres_db --value="$postgres_db"

# Set up PostgreSQL database and user
sudo -u postgres psql -tc "SELECT 1 FROM pg_roles WHERE rolname='$postgres_user'" | grep -q 1 || \
sudo -u postgres psql -c "CREATE USER $postgres_user WITH PASSWORD '$postgres_password';"

sudo -u postgres psql -lqt | cut -d \| -f 1 | grep -qw $postgres_db || \
sudo -u postgres psql -c "CREATE DATABASE $postgres_db OWNER $postgres_user;"

sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE $postgres_db TO $postgres_user;"


#=================================================
# DOWNLOAD, CHECK, AND SET UP SOURCE
#=================================================

ynh_script_progression --message="Setting up source files..." --weight=2
ynh_setup_source --dest_dir="$install_dir" --source_id="main"

# Set ownership of the installation directory
chown -R "$app:www-data" "$install_dir"

# Update create_database.js to use "IF NOT EXISTS"
sed -i 's/CREATE DATABASE .*/CREATE DATABASE IF NOT EXISTS ${_POSTGRES_DATABASE};/' "$install_dir/backend/create_database.js"

# Update swagger.json to set host as the domain
sed -i "s|\"host\": \"\"|\"host\": \"$domain\"|g" "$install_dir/backend/swagger.json"

#=================================================
# INSTALL NPM DEPENDENCIES AND BUILD
#=================================================

ynh_script_progression --message="Installing and building app dependencies..." --weight=2
cd "$install_dir"
npm install
npm run build

#=================================================
# CONFIGURE ENVIRONMENT VARIABLES
#=================================================

ynh_script_progression --message="Configuring environment variables..." --weight=2
cat <<EOL > "$install_dir/.env"
POSTGRES_USER=$postgres_user
POSTGRES_PASSWORD=$postgres_password
POSTGRES_IP=127.0.0.1
POSTGRES_PORT=5432
POSTGRES_DB=$postgres_db
JWT_SECRET=$jwt_secret
PORT=$app_port
EOL

# Set appropriate permissions for the `.env` file
chmod 600 "$install_dir/.env"
chown "$app:$app" "$install_dir/.env"

#=================================================
# SET UP SYSTEMD SERVICE
#=================================================

ynh_script_progression --message="Setting up systemd service..." --weight=2
ynh_add_systemd --service_name="$app" --template="systemd.service"

# Reload systemd and start the service
systemctl daemon-reload
ynh_systemctl --service="$app" --action="start"

#=================================================
# FINISH INSTALLATION
#=================================================

ynh_script_progression --message="Installation of $app completed!" --last
